:py:mod:`cubewalkers.experiment`
================================

.. py:module:: cubewalkers.experiment

.. autoapi-nested-parse::

   This module contains the
   :class:`Experiment<cubewalkers.experiment.Experiment>` class for storing and
   manipulating experimental conditions.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cubewalkers.experiment.Experiment




.. py:class:: Experiment(override_string: str, comment_char: str = '#')


   Stores information from user-specified experimental inputs.

   :param override_string: Experimental conditions to incorporate. Each line should be in one of the following forms:

                           - NodeName,StartTime,EndTime,RuleToSubstitute
                           - ParentName-->NodeName,StartTime,EndTime,RuleToSubstitute

                           If NodeName ends in a '*', then update is not forced (i.e., the update
                           rule becomes fixed to RuleToSubstitute). Otherwise, update is forced,
                           and the node NodeName takes the value RuleToSubstitute at each time
                           step. Note that this does not make any difference in synchronous update.
                           The control can be made permanent by specifying an EndTime of inf.
                           If NodeName is preceded by 'ParentName-->', then RuleToSubstitute replaces
                           all occurences of ParentName in the update rule for NodeName, and the
                           update is never forced. Specifying conflicting controls is not supported
                           and may lead to undefined behavior.
   :type override_string: str
   :param comment_char: Empty lines and lines beginning with this character are ignored, by default '#'.
   :type comment_char: str, optional

   .. py:method:: new_rule(old_rule: str) -> str

      Modifies an input rule to incorporate the time-dependent experimental conditions
      stored internally.

      :param old_rule: Rule to modify.
      :type old_rule: str

      :returns: Modified rule, with time dependence.
      :rtype: str


   .. py:method:: time_clamp_string(varnames: Iterable[str]) -> str

      Generates and returns a string that determines when the update mask should
      be ignored because of the experimental conditions.

      :param varnames: Names of the variables in the system.
      :type varnames: Iterable[str]

      :returns: String that is interperable as a C++ Boolean expression. When this evaluates
                to true, the update mask is ignored and an update is performed.
      :rtype: str



